[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/156252742",
    "html_url": "https://github.com/facebook/react/pull/5462#issuecomment-156252742",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/5462",
    "id": 156252742,
    "user": {
      "login": "jimfb",
      "id": 9595985,
      "avatar_url": "https://avatars.githubusercontent.com/u/9595985?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimfb",
      "html_url": "https://github.com/jimfb",
      "followers_url": "https://api.github.com/users/jimfb/followers",
      "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
      "organizations_url": "https://api.github.com/users/jimfb/orgs",
      "repos_url": "https://api.github.com/users/jimfb/repos",
      "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimfb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T22:14:09Z",
    "updated_at": "2015-11-12T22:14:09Z",
    "body": "@sebmarkbage has context on this.  cc @spicyj for reference."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/156256938",
    "html_url": "https://github.com/facebook/react/pull/5462#issuecomment-156256938",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/5462",
    "id": 156256938,
    "user": {
      "login": "spicyj",
      "id": 6820,
      "avatar_url": "https://avatars.githubusercontent.com/u/6820?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spicyj",
      "html_url": "https://github.com/spicyj",
      "followers_url": "https://api.github.com/users/spicyj/followers",
      "following_url": "https://api.github.com/users/spicyj/following{/other_user}",
      "gists_url": "https://api.github.com/users/spicyj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spicyj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spicyj/subscriptions",
      "organizations_url": "https://api.github.com/users/spicyj/orgs",
      "repos_url": "https://api.github.com/users/spicyj/repos",
      "events_url": "https://api.github.com/users/spicyj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spicyj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T22:26:43Z",
    "updated_at": "2015-11-12T22:26:43Z",
    "body": "cc @gaearon, #4593"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/156271416",
    "html_url": "https://github.com/facebook/react/pull/5462#issuecomment-156271416",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/5462",
    "id": 156271416,
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T23:36:51Z",
    "updated_at": "2015-11-12T23:37:00Z",
    "body": "In general, I like this.\r\n\r\nI have a question: how does this design deal with attaching mid-way? For example, say there's an async dev tool that only connects to a page after some initialization period. Or say it allows reconnecting. (I believe React DevTools currently let you do this?)\r\n\r\nIf a devtool derives all of its internal state from an event log, if it misses the start of the event log and connects asynchronously, it can't derive the state. However keeping a reference to the event log is also wasteful.\r\n\r\nAm I overthinking this?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/156273802",
    "html_url": "https://github.com/facebook/react/pull/5462#issuecomment-156273802",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/5462",
    "id": 156273802,
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T23:50:37Z",
    "updated_at": "2015-11-12T23:50:37Z",
    "body": "Another question is whether the DevTools API is meant to be completely read-only.\r\nAn event log approach is read-only, but it doesn't seem to let you:\r\n\r\n* force re-render of an arbitrary instance (extremely [useful to hot reloading](https://github.com/gaearon/react-deep-force-update))\r\n* prevent re-renders of an arbitrary instance (useful for a perf tool to find bottlenecks)\r\n* hook into render and lifecycle to catch errors (useful for RN-like error reporting with hot reloading)\r\n* tweak instance's props or state from the inspector (not sure it's useful given React's model though)\r\n\r\nForcing re-render is a big use case for me. (Especially so for the functional components that don't even have an instance to call `forceUpdate()` on.)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/156285257",
    "html_url": "https://github.com/facebook/react/pull/5462#issuecomment-156285257",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/5462",
    "id": 156285257,
    "user": {
      "login": "jimfb",
      "id": 9595985,
      "avatar_url": "https://avatars.githubusercontent.com/u/9595985?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimfb",
      "html_url": "https://github.com/jimfb",
      "followers_url": "https://api.github.com/users/jimfb/followers",
      "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
      "organizations_url": "https://api.github.com/users/jimfb/orgs",
      "repos_url": "https://api.github.com/users/jimfb/repos",
      "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimfb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-13T00:59:36Z",
    "updated_at": "2015-11-13T00:59:36Z",
    "body": "@gaearon \r\nObviously you should try to attach all devtools before first render.  However, attaching mid-way is permitted, and the newly-attached devtool would miss the history.  There are a couple of options here.  The simplest is that the newly-attached devtool ignores events until it finds a \"synchronizing event\" such as a root-level call to `React.render` that it understands, and can start building internal state from that point forward (This strategy is stolen from the idea/way that compilers recover from invalid parse trees).  With such an approach, once all the root components on a page have done a full re-render, the devtool is \"caught up\".  We could force a rerender of all components on the page upon a devtool being added, or at the very least emit \"welcome\" event announcing that the new devtool has been attached and providing a basic synchronization event that lists the current React roots.  So my answer would be: yes, still figuring out the details though.  Do you have any thoughts on how best to do this?\r\n\r\nForcing rerender is easy - you will already know the React root's \"container\" node (from the previous render events your devtool witnessed) and you will already have the element that was rendered to that node (from that same previous render event), so you can just invoke `React.render`.  Alternatively, you could store the instance that resulted and invoke `forceUpdate()`.\r\n\r\nRegarding read only: This API is intended to provide one side of the [CQRS](https://msdn.microsoft.com/en-us/library/dn568103.aspx) flow.  Specifically, this API handles QUERY (all data that React provides will come in the form of these events).  It does not provide the command side/flow, which is completely independent by definition of CQRS.  For now, the command side would require utilizing the existing public API (or reaching into internal/private API) until such time as we can design+expose an intelligent set of commands for devtools."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/156290297",
    "html_url": "https://github.com/facebook/react/pull/5462#issuecomment-156290297",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/5462",
    "id": 156290297,
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-13T01:36:24Z",
    "updated_at": "2015-11-13T01:36:24Z",
    "body": "How do you plan to deal with functional components? They don't have (public) instances, but dev tools may need to re-render them or at least show them in a tree. Do they have IDs but not instances? Do dev tools receive internal instances?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/156300572",
    "html_url": "https://github.com/facebook/react/pull/5462#issuecomment-156300572",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/5462",
    "id": 156300572,
    "user": {
      "login": "jimfb",
      "id": 9595985,
      "avatar_url": "https://avatars.githubusercontent.com/u/9595985?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimfb",
      "html_url": "https://github.com/jimfb",
      "followers_url": "https://api.github.com/users/jimfb/followers",
      "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
      "organizations_url": "https://api.github.com/users/jimfb/orgs",
      "repos_url": "https://api.github.com/users/jimfb/repos",
      "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimfb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-13T02:22:11Z",
    "updated_at": "2015-11-13T02:22:11Z",
    "body": "@gaearon That question is slightly orthogonal to this API (it's a matter of what is doable in the React core, regardless of the communication mechanism).  That said, functional components will not have internal instances and so there is no way to reference/rerender only a functional component.  You would need to rerender the closest parent ancestor."
  }
]
