+import('../../iconsets/github.html')
+import('../../../bower_components/core-icon/core-icon.html')
+import('../../../bower_components/marked-element/marked-element.html')
+import('./ticker-github-branch.html')
+import('./ticker-github-repo.html')
+import('./ticker-github-avatar.html')
script(src='../../../bower_components/time-elements/time-elements.js')

+polymer-element(attributes='events')

  template#Comment
    .action__content(flex class='t-normal t-word-wrap-break-word')
      marked-element(text='[[]]')

  template#EventTimeAgo
    time(
      class='c-gray-dark t-font-size-11'
      datetime='[[createdAt]]'
      format='micro'
      is='time-ago'
    )

  template#CardTitle
    .title(class='t-font-size-18')
      ticker-github-repo(flex repo='[[repo.name]]')
      template(ref='EventTimeAgo' bind='[[]]')


  template#PullRequestEvent
    template(ref='CardTitle' bind='[[]]')
    .subject
      core-icon(
        class='[[   payload.pullRequest.state === "open" ? "c-warning-light"    \
                  : payload.pullRequest.merged           ? "c-confirm-light"    \
                                                         : "c-error-light"   ]] \
               l-margin-r3'
        icon='github:git-pull-request')
      | [[payload.pullRequest.title]]
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      template(ref='Comment' bind='[[payload.pullRequest.body]]')


  template#CreateOrDeleteEvent
    template(if='[[payload.refType !== "repository"]]')
      template(ref='CardTitle' bind='[[]]')

    .subject
      core-icon(
        class='[[type === "CreateEvent" ? "c-confirm-light" \
                                        : "c-error-light"]] \
               l-margin-r3'
        icon='github:[[payload.refType === "repository" ? "repo" : "git-branch"]]'
      )
      template(if='[[payload.refType === "repository"]]')
        ticker-github-repo(repo='[[repo.name]]')
      template(if='[[payload.refType !== "repository"]]')
        | [[payload.ref]]

    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      | [[ (type === 'CreateEvent' ? 'created' : 'deleted') + ' this ' + payload.refType ]]

  template#CreateEvent
    template(ref='CreateOrDeleteEvent' bind='[[]]')

  template#DeleteEvent
    template(ref='CreateOrDeleteEvent' bind='[[]]')

  template#PullRequestReviewCommentEvent
    template(ref='CardTitle' bind='[[]]')
    .subject
      core-icon(
        class='[[payload.pullRequest.state === "closed" ? "c-error-light"     \
                                                        : "c-warning-light"]] \
               l-margin-r3'
        icon='github:git-pull-request'
      )
      | [[payload.pullRequest.title]]
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      template(ref='Comment' bind='[[payload.comment.body]]')


  template#IssueCommentEvent
    template(ref='CardTitle' bind='[[]]')
    .subject
      core-icon(
        class='[[payload.issue.state === "closed" ? "c-error-light"     \
                                                  : "c-warning-light"]] \
               l-margin-r3'
        icon='[[payload.issue.pullRequest ? "github:git-pull-request" \
                                          : "github:issue-opened"     ]]'
      )
      | [[payload.issue.title]]
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      template(ref='Comment' bind='[[payload.comment.body]]')


  template#IssuesEvent
    template(ref='CardTitle' bind='[[]]')
    .subject
      core-icon(
        class='[[payload.action === "closed" ? "c-error-light"    \
                                             : "c-warning-light"]] \
               l-margin-r3'
        icon='github:issue-[[payload.action]]'
      )
      | [[payload.issue.title]]
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      p(flex)
        span(block class='l-margin-b1') [[payload.action]] this issue
        template(ref='Comment' bind='[[payload.issue.body]]')


  template#CommitCommentEvent
    template(ref='CardTitle' bind='[[]]')
    .subject
      core-icon(class='c-confirm-light l-margin-r3' icon='github:git-commit')
      | [[payload.comment.commitId]]
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      template(ref='Comment' bind='[[payload.comment.body]]')


  template#WatchEvent
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      core-icon(
        class='c-gray-lighter l-margin-r3'
        icon='github:star'
      )
      ticker-github-repo(flex class='c-gray-dark t-truncate' repo='[[repo.name]]')
      template(ref='EventTimeAgo' bind='[[]]')


  template#ForkEvent
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      core-icon(
        class='c-gray-lighter l-margin-r3'
        icon='github:repo-forked'
      )
      ticker-github-repo(flex class='c-gray-dark' repo='[[repo.name]]')
      template(ref='EventTimeAgo' bind='[[]]')


  template#PushEvent
    template(ref='CardTitle' bind='[[]]')
    .subject
      core-icon(class='c-gray-light l-margin-r3' icon='github:git-branch')
      ticker-github-branch(branch='[[payload.ref]]')
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      ul(flex)
        template(repeat='[[commit in limitArray(payload.commits, 3)]]')
          li(horizontal layout center)
            core-icon(self-start class='c-confirm-light l-margin-r3' icon='github:git-commit')
            span(flex class='t-normal t-word-wrap-break-word')
              | [[commit.message]]


  template#GollumEvent
    template(ref='CardTitle' bind='[[]]')
    .subject
      core-icon(class='c-gray-light l-margin-r3' icon='github:book')
      | [[payload.pages[0].title]]
    .action
      ticker-github-avatar(class='l-margin-r3' userid='[[actor.id]]')
      | edited this wiki page

  template(repeat='{{data in events}}')
    //- div.c-gray-dark.l-margin-l2.l-margin-v4.l-margin-b2.t-normal [[data.type]]
    .card(class='l-margin-b1')
      template(ref='[[data.type]]' bind='[[data]]')
